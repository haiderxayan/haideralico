#!/usr/bin/env python3
"""
GitHub-based notification system for daily article generator
Creates GitHub issues with article details to trigger mobile notifications
"""

import os
import requests
import json
from datetime import datetime
from pathlib import Path

# Configuration
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_OWNER = "haiderxayan"  # Your GitHub username
REPO_NAME = "haideralico"   # Your repository name

def create_github_issue(title, url, filename, topic, template_type):
    """Create a GitHub issue with article details"""
    
    if not GITHUB_TOKEN:
        print("Warning: GITHUB_TOKEN not set. Skipping GitHub notification.")
        return False
    
    # Create issue title
    issue_title = f"📝 New Article Published: {title}"
    
    # Create issue body with rich formatting
    issue_body = f"""## 🎉 Daily Article Published!

Your automated daily blog post has been successfully generated and published!

### 📋 Article Details
- **Title**: {title}
- **Topic**: {topic}
- **Template**: {template_type}
- **Filename**: `{filename}`
- **URL**: {url}
- **Published**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### 🔗 Quick Links
- [📖 Read Article]({url})
- [📁 View File](https://github.com/{REPO_OWNER}/{REPO_NAME}/blob/main/_posts/{filename})
- [🏠 Blog Home](https://haiderali.co)

### 📱 Mobile Notification
This issue was created to notify you via your GitHub mobile app about the new article publication.

---
*Generated by Daily Article Automation System*
"""
    
    # GitHub API endpoint
    url_api = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/issues"
    
    # Headers
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Daily-Article-Generator"
    }
    
    # Issue data
    issue_data = {
        "title": issue_title,
        "body": issue_body,
        "labels": ["article", "automated", "daily-post", f"topic-{topic.lower().replace(' ', '-')}"]
    }
    
    try:
        # Create the issue
        response = requests.post(url_api, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            issue_info = response.json()
            issue_url = issue_info["html_url"]
            issue_number = issue_info["number"]
            
            print(f"✅ GitHub issue created successfully!")
            print(f"   Issue #{issue_number}: {issue_url}")
            return True
        else:
            print(f"❌ Failed to create GitHub issue: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error creating GitHub issue: {e}")
        return False

def create_github_comment(issue_number, title, url, filename):
    """Add a comment to an existing issue (alternative approach)"""
    
    if not GITHUB_TOKEN:
        print("Warning: GITHUB_TOKEN not set. Skipping GitHub comment.")
        return False
    
    # Comment body
    comment_body = f"""## 📝 New Article Published!

**Title**: {title}
**URL**: {url}
**File**: `{filename}`
**Time**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

[Read Article]({url}) | [View File](https://github.com/{REPO_OWNER}/{REPO_NAME}/blob/main/_posts/{filename})
"""
    
    # GitHub API endpoint
    url_api = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/comments"
    
    # Headers
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Daily-Article-Generator"
    }
    
    # Comment data
    comment_data = {
        "body": comment_body
    }
    
    try:
        # Create the comment
        response = requests.post(url_api, headers=headers, json=comment_data)
        
        if response.status_code == 201:
            comment_info = response.json()
            comment_url = comment_info["html_url"]
            
            print(f"✅ GitHub comment added successfully!")
            print(f"   Comment: {comment_url}")
            return True
        else:
            print(f"❌ Failed to add GitHub comment: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error adding GitHub comment: {e}")
        return False

def create_github_gist(title, url, filename, topic, template_type):
    """Create a GitHub Gist with article details (alternative approach)"""
    
    if not GITHUB_TOKEN:
        print("Warning: GITHUB_TOKEN not set. Skipping GitHub Gist.")
        return False
    
    # Gist content
    gist_content = f"""# 📝 Daily Article Published - {datetime.now().strftime('%Y-%m-%d')}

## Article Details
- **Title**: {title}
- **Topic**: {topic}
- **Template**: {template_type}
- **Filename**: {filename}
- **URL**: {url}
- **Published**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Quick Links
- [📖 Read Article]({url})
- [📁 View File](https://github.com/{REPO_OWNER}/{REPO_NAME}/blob/main/_posts/{filename})
- [🏠 Blog Home](https://haiderali.co)

---
*Generated by Daily Article Automation System*
"""
    
    # GitHub API endpoint
    url_api = "https://api.github.com/gists"
    
    # Headers
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Daily-Article-Generator"
    }
    
    # Gist data
    gist_data = {
        "description": f"Daily Article: {title}",
        "public": False,  # Private gist
        "files": {
            f"daily-article-{datetime.now().strftime('%Y-%m-%d')}.md": {
                "content": gist_content
            }
        }
    }
    
    try:
        # Create the gist
        response = requests.post(url_api, headers=headers, json=gist_data)
        
        if response.status_code == 201:
            gist_info = response.json()
            gist_url = gist_info["html_url"]
            
            print(f"✅ GitHub Gist created successfully!")
            print(f"   Gist: {gist_url}")
            return True
        else:
            print(f"❌ Failed to create GitHub Gist: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error creating GitHub Gist: {e}")
        return False

def main():
    """Test the GitHub notification system"""
    print("🧪 Testing GitHub notification system...")
    
    # Test data
    test_title = "Test Article: The Complete Guide to User Research in 2024"
    test_url = "https://haiderali.co/2024/01/15/the-complete-guide-to-user-research-in-2024/"
    test_filename = "2024-01-15-the-complete-guide-to-user-research-in-2024.md"
    test_topic = "User Research"
    test_template = "guide"
    
    print(f"📝 Testing with: {test_title}")
    
    # Test GitHub issue creation
    print("\n🔧 Testing GitHub Issue creation...")
    issue_success = create_github_issue(test_title, test_url, test_filename, test_topic, test_template)
    
    # Test GitHub Gist creation
    print("\n🔧 Testing GitHub Gist creation...")
    gist_success = create_github_gist(test_title, test_url, test_filename, test_topic, test_template)
    
    print("\n" + "="*50)
    print("📊 GITHUB NOTIFICATION TEST RESULTS")
    print("="*50)
    print(f"✅ GitHub Issue: {'Success' if issue_success else 'Failed'}")
    print(f"✅ GitHub Gist: {'Success' if gist_success else 'Failed'}")
    print("="*50)
    
    if not GITHUB_TOKEN:
        print("\n⚠️  To enable GitHub notifications:")
        print("1. Go to GitHub → Settings → Developer settings → Personal access tokens")
        print("2. Generate a new token with 'repo' permissions")
        print("3. Add it as GITHUB_TOKEN secret in your repository")
    
    return issue_success or gist_success

if __name__ == "__main__":
    main()
